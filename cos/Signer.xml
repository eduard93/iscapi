<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Red Hat Enterprise Linux for x86-64) 2016.1 (Build 646U)" ts="2016-11-20 08:45:46">
<Class name="iscapi.Signer">
<Description>
Функции для работы с крипто-провайдерами через интерфейс MSCAPI или его аналог
Тестировалось на CryptoPro-CAPILite</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64241,56924.555386</TimeChanged>
<TimeCreated>62647,62739.879273</TimeCreated>

<Method name="LoadDLL">
<Description>
Загрузка DLL
		dllPath			- полный путь к библиотеке</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>dllPath:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result = $$$OK
	if (dllPath = "") {
		w "Please set dllPath equal to path to the ISCAPI.dll"
		q $$$ERROR($$$GeneralError, "No path to iscapi.dll is provided")
	}
	try {
		d $zf(-3, dllPath)
	}
	catch (ex) {
		s result = ex.AsStatus()	
	}
	q result
]]></Implementation>
</Method>

<Method name="UnloadDLL">
<Description>
Выгрузка DLL</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	d $zf(-3, "")
]]></Implementation>
</Method>

<Method name="Init">
<Description>
Инициализация крипто-провайдера.
		provType		- тип провайдера (VipNet=2, CryptoPro=75)
		algId			- используемый алгоритм (32798)
		containerName 	- полное име контейнера с ключами
		pin				- пароль к контейнеру (если не указан, CSP будет запршивать его в интерактивном режиме, что не всегда возможно)
		providerName	- имя крипто-провайдера</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>provType=2,algId=32798,containerName:%String,pin:%String="111111",providerName:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result = $$$OK
	try {
		d $zf(-3, "", "Init", provType, algId, containerName, pin, providerName)
	}
	catch (ex) {
		s result = ex.AsStatus()	
	}
	q result
]]></Implementation>
</Method>

<Method name="InitLogger">
<Description>
Инициализация протоколирования.
	logFileName 	- имя файла протокола. Должно быть право на запись.
		logLevel 		- уровень протоколирования
			0 - ничего
			1 - только ошибки
			2 - все сообщения
		logTargets		- устройства, в которые нужно писать протокол
			0 - не писать никуда
			1 - писать в файл
			2 - выводить на консоль
			3 - файл и консоль</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>logFileName:%String="c:\iscapi.log",logLevel:%Integer=2,logTargets:%Integer=3</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result = $$$OK
	try {
		d $zf(-3, "", "InitLogger", logFileName, logLevel, logTargets)
	}
	catch ex {
		s result = ex.AsStatus()
	}
	q result
]]></Implementation>
</Method>

<Method name="HashData">
<Description>
Хеширование порции данных.
Можно вызывать в цикле для хеширования потока по чанкам, каждая порция данных будет прибавляться к хешу.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>dataPortion:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result = $$$OK
	try {
		d $zf(-3, "", "HashData", dataPortion)
	}
	catch ex {
		s result = ex.AsStatus()
	}
	q result
]]></Implementation>
</Method>

<Method name="GetHashValue">
<Description>
Возвращает значение хеша.
После вызова хеш высвобождается (то есть эту функцию следует вызывать лишь один раз).</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s result = ""
	try {
		s result = $zf(-3, "", "GetHashValue", "")
	}
	catch ex {
		s result = ""
	}
	q result
]]></Implementation>
</Method>

<Method name="ExportUserKey">
<Description>
Экспорт открытого ключа.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s result = ""
	try {
		s result = $zf(-3, "", "ExportUserKey", "")
	}
	catch ex {
		s result = ""
	}
	q result
]]></Implementation>
</Method>

<Method name="ExportCertificate">
<Description>
Экспорт сертификата ключа пользователя (DER-formatted).</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s result = ""
	try {
		s result = $zf(-3, "", "ExportCertificate", "")
	}
	catch ex {
		s result = ""
	}
	q result
]]></Implementation>
</Method>

<Method name="ExportCertificateBase64">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	q $system.Encryption.Base64Encode(..ExportCertificate())
]]></Implementation>
</Method>

<Method name="ExportCertificatePEM">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	q "-----BEGIN CERTIFICATE-----" _ $$$EOL _ ..ExportCertificateBase64() _ $$$EOL _ "-----END CERTIFICATE-----"
]]></Implementation>
</Method>

<Method name="SignHash">
<Description>
Подпись хеша.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>hash:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s result = ""
	try {
		s result = $zf(-3, "", "SignHash", hash, "")
	}
	catch ex {
		s result = ""
	}
	q result
]]></Implementation>
</Method>

<Method name="SignCurrentHash">
<Description>
Подпись текущего объекта хеша.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s result = ""
	try {
		s result = $zf(-3, "", "SignCurrentHash", "")
	}
	catch ex {
		s result = ""
	}
	q result
]]></Implementation>
</Method>

<Method name="VerifyHash">
<Description>
Проверка подписи хэша.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>hash:%String,sign:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	s result = 0
	try {
		s result = $zf(-3, "", "VerifyHash", hash, sign, 0)
	}
	catch ex {
		s result = 0
	}
	q result
]]></Implementation>
</Method>

<Method name="VerifyHashByKey">
<Description>
Проверка подписи хэша по открытому ключу.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>hash:%String,sign:%String,pubKey:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	s result = 0
	try {
		s result = $zf(-3, "", "VerifyHashByKey", hash, sign, pubKey, 0)
	}
	catch ex {
		s result = 0
	}
	q result
]]></Implementation>
</Method>

<Method name="VerifySignature">
<Description>
Проверка подписи данных</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inputStr:%String,sign:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	d ..HashData(inputStr)
	s hash = ..GetHashValue()
	s vfy = ..VerifyHash(hash, sign)
	//w "Verifying Hash signature for DATA result = ", vfy, !
	q vfy
]]></Implementation>
</Method>

<Method name="Release">
<Description>
Освобождение ресурсов и выгрузка DLL</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result = $$$OK
	try {
		d $zf(-3, "", "Release")
		d ..UnloadDLL()
	}
	catch ex {
		s result = ex.AsStatus()
	}
	q result
]]></Implementation>
</Method>

<Method name="EncryptData">
<ClassMethod>1</ClassMethod>
<FormalSpec>dataPortion:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s result = ""
	try {
		s result = $zf(-3, "", "EncryptData", dataPortion)
	}
	catch ex {
		s result = ""
	}
	q result
]]></Implementation>
</Method>

<Method name="ExportSessionKey">
<ClassMethod>1</ClassMethod>
<FormalSpec>publicKeyBlob:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s result = ""
	try {
		s result = $zf(-3, "", "ExportSessionKey", publicKeyBlob)
	}
	catch ex {
		s result = ""
	}
	q result
]]></Implementation>
</Method>

<Method name="DecryptData">
<ClassMethod>1</ClassMethod>
<FormalSpec>encryptedData:%String,encryptedSessionKey:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s result = ""
	try {
		s result = $zf(-3, "", "DecryptData", encryptedData, encryptedSessionKey)
	}
	catch ex {
		s result = ""
	}
	q result
]]></Implementation>
</Method>

<Method name="ByteToHex">
<Description>
Преобразование бинарной строки в HEX
TODO: rewrite</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>bString:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s str = ""
	for i=1:1:$l(bString) {
		s hex = $zhex($ascii($e(bString, i)))
		if ($l(hex) = 1) s hex = "0" _ hex
		s str = str _ hex
	}
	q str
]]></Implementation>
</Method>

<Method name="HexToString">
<ClassMethod>1</ClassMethod>
<FormalSpec>value:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s str = ""
	for i=1:2:$l(value) {
		s hex = $e(value, i, i + 1)
		s str = str _ $c($zhex(hex))
	}
	
	q str
]]></Implementation>
</Method>

<Method name="TestCP">
<Description>
Тестовый прогон КриптоПро
Updated TDA-2016-11-07 For ExportCertificate</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	//s data = "<Body>"
	s data="<root>12345</root>"
	
	d ..LoadDLL("/opt/iscapi/iscapi.so")
	d ..InitLogger("/tmp/iscapiCP-7.log", 2, 3)
	
	d ..Init(75, 32798, "\\.\HDIMAGE\MVK-Test-07", "111111", "Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider")
		
	d ..HashData(data)
	s hash = ..GetHashValue()

	w "Hash received, hash length=", $l(hash), !
	w "Hash to base64:", !, $system.Encryption.Base64Encode(hash), !
	w "Hash to HEX:", !, ..ByteToHex(hash), !

	s sign = ..SignHash(hash)
	w "Hash signed, sign length=", $l(sign), !
	w "Sign to base64:", !, $system.Encryption.Base64Encode(sign), !
	w "Sign to HEX:", !, ..ByteToHex(sign), !

	s vfy = ..VerifyHash(hash, sign)
	w "Verifying Hash signature result = ", vfy, !
	
	s vfy = ..VerifySignature(data, sign)
	w "Verifying Hash signature for DATA result = ", vfy, !
	
	s userKey = ..ExportUserKey()
	w "UserKeyBytes: ", ..ByteToHex(userKey), !!
	
	s certificate = ..ExportCertificate()
	//w "CertificateBytes: ", ..ByteToHex(certificate), !
	
	w "PEMCertificate: ", !, ..ExportCertificatePEM(), !!

	s vfy = ..VerifyHashByKey(hash, sign, userKey)
	w "Verifying Hash signature ByKey result = ", vfy, !!
	
	s encryptedData = ..EncryptData(data)
	w "EncryptedData = ", ..ByteToHex(encryptedData), !!
	
	s sessionKey = ..ExportSessionKey(userKey)
	w "Session Key = ", ..ByteToHex(sessionKey), !!
	
	s decryptedData = ..DecryptData(encryptedData, sessionKey)
	w "DecryptedData = ", decryptedData, !!
	
	d ..Release()
]]></Implementation>
</Method>

<Method name="TestEsia">
<Description>
Тестирование макета авторизации через ЕСИА</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	s data="<root>012345678901234567890123456789012345678901234567890123456789</root>"
	
	////// Считаем, что мы отправили запрос к ЕСИА и она отвечает нам
	////// ЕСИА - Sender, Приложение - Receiver шифрованных данных
	
	// Эмуляция ответа от ЕСИА
	d ..LoadDLL("/opt/iscapi/iscapi.so")
	d ..InitLogger("/tmp/iscapi-esia.log", 2, 3)
	d ..Init(75, 32798, "\\.\HDIMAGE\ESIA-Sender", "111111", "Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider")
	
	s f = ##class(%FileBinaryStream).%New()
	s f.Filename = "/tmp/sender.pub"
	s senderKey = f.Read()
	w "Sender Key = ", ..ByteToHex(senderKey), !!
	
	s encryptedData = ..EncryptData(data)
	w "EncryptedData = ", ..ByteToHex(encryptedData), !!
	
	s sessionKey = ..ExportSessionKey(senderKey)
	w "Session Key = ", ..ByteToHex(sessionKey), !!
	
	d ..Release()
	
	////// Переключаемся на сторону приложения-получателя (Receiver)
	////// Это необходимо ввиду DH 
	d ..LoadDLL("/opt/iscapi/iscapi.so")
	d ..InitLogger("/tmp/iscapi-esia.log", 2, 3)
	d ..Init(75, 32798, "\\.\HDIMAGE\ESIA-Receiver", "111111", "Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider")

	s receiverKey = ..ExportUserKey()
	w "Receiver Key = ", ..ByteToHex(receiverKey), !!
	
	s decryptedData = ..DecryptData(encryptedData, sessionKey)
	w "DecryptedData = ", decryptedData, !!
	
	d ..Release()
]]></Implementation>
</Method>
</Class>
</Export>
